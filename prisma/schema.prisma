// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String? @unique
  emailVerified DateTime?
  image String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store Store?
  products Product[]
  banner Banner?
}

model Store {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  subdomain String? @unique
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String @db.ObjectId @unique

  products Product[]
  orders Order[]
  banner Banner?

  // line below creates a relation with the User using the userId field and 
  // it references the User model id field
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String
  color String
  size String
  price Int
  images String[]
  archived Boolean
  createdAt DateTime @default(now())
  userId String @db.ObjectId
  storeId String @db.ObjectId

  // line below creates a relation with the User using the userId field and 
  // it references the User model id field
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)
}

model Banner {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  bannerText String
  bannerImage String
  createdAt DateTime @default(now())
  userId String @db.ObjectId @unique
  storeId String @db.ObjectId @unique

  // line below creates a relation with the User using the userId field and 
  // it references the User model id field
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)
}

model Order {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  orderItems String[]
  orderTotal Int
  counts Json
  isPaid Boolean
  phone String
  address String
  createdAt DateTime @default(now())
  storeId String @db.ObjectId

  store Store @relation(fields: [storeId], references: [id], onDelete: Cascade)
}
